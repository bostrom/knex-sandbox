;; Analyzed by ClojureScript 0.0-3308
{:use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {util reagent.impl.util, reagent.impl.util reagent.impl.util, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :defs {get-wrapper {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 120, :column 7, :end-line 120, :end-column 18, :arglists (quote ([key f name]))}, :name reagent.impl.component/get-wrapper, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 18, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name]))}, obligatory {:name reagent.impl.component/obligatory, :file "resources/templates/js/out/reagent/impl/component.cljs", :line 129, :column 1, :end-line 129, :end-column 16, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 129, :column 6, :end-line 129, :end-column 16}}, default-wrapper {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 106, :column 7, :end-line 106, :end-column 22, :arglists (quote ([f]))}, :name reagent.impl.component/default-wrapper, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, do-render {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 33, :column 7, :end-line 33, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.component/do-render, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, add-obligatory {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 139, :column 7, :end-line 139, :end-column 21, :arglists (quote ([fun-map]))}, :name reagent.impl.component/add-obligatory, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 21, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, state-atom {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([this]))}, :name reagent.impl.component/state-atom, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, dash-to-camel {:name reagent.impl.component/dash-to-camel, :file "resources/templates/js/out/reagent/impl/component.cljs", :line 132, :column 1, :end-line 132, :end-column 19, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 132, :column 6, :end-line 132, :end-column 19}}, map-to-js {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 168, :column 7, :end-line 168, :end-column 16, :arglists (quote ([m]))}, :name reagent.impl.component/map-to-js, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, dont-wrap {:name reagent.impl.component/dont-wrap, :file "resources/templates/js/out/reagent/impl/component.cljs", :line 112, :column 1, :end-line 112, :end-column 15, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 112, :column 6, :end-line 112, :end-column 15}}, state {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([this]))}, :name reagent.impl.component/state, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, *current-component* {:name reagent.impl.component/*current-component*, :file "resources/templates/js/out/reagent/impl/component.cljs", :line 9, :column 1, :end-line 9, :end-column 39, :dynamic true, :declared true, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 9, :column 20, :end-line 9, :end-column 39, :dynamic true, :declared true}}, camelify-map-keys {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 134, :column 7, :end-line 134, :end-column 24, :arglists (quote ([fun-map]))}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 24, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, replace-state {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 22, :column 7, :end-line 22, :end-column 20, :arglists (quote ([this new-state]))}, :name reagent.impl.component/replace-state, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 20, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state]))}, cljsify {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 174, :column 7, :end-line 174, :end-column 14, :arglists (quote ([body]))}, :name reagent.impl.component/cljsify, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 14, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, dont-bind {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 114, :column 7, :end-line 114, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.component/dont-bind, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, set-state {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([this new-state]))}, :name reagent.impl.component/set-state, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state]))}, add-render {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 142, :column 7, :end-line 142, :end-column 17, :arglists (quote ([fun-map render-f]))}, :name reagent.impl.component/add-render, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 17, :method-params ([fun-map render-f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fun-map render-f]))}, custom-wrapper {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([key f]))}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 21, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f]))}, create-class {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 181, :column 7, :end-line 181, :end-column 19, :arglists (quote ([body as-component]))}, :name reagent.impl.component/create-class, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 19, :method-params ([body as-component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([body as-component]))}, wrap-funs {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/component.cljs", :line 151, :column 7, :end-line 151, :end-column 16, :arglists (quote ([fun-map]))}, :name reagent.impl.component/wrap-funs, :variadic false, :file "resources/templates/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{:displayName :cljsRender :componentWillUnmount :shouldComponentUpdate :render :componentFunction}, :order [:cljsRender :render :componentFunction :shouldComponentUpdate :componentWillUnmount :displayName]}, :doc nil}