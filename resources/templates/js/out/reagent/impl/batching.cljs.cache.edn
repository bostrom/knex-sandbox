;; Analyzed by ClojureScript 0.0-3308
{:use-macros {dbg reagent.debug, .' reagent.interop, .! reagent.interop}, :excludes #{flush}, :name reagent.impl.batching, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.impl.util reagent.impl.util, string clojure.string, clojure.string clojure.string}, :uses {is-client reagent.impl.util}, :defs {fake-raf {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 11, :column 7, :end-line 11, :end-column 15, :arglists (quote ([f]))}, :name reagent.impl.batching/fake-raf, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, run-reactively {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 69, :column 7, :end-line 69, :end-column 21, :arglists (quote ([c run]))}, :name reagent.impl.batching/run-reactively, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 21, :method-params ([c run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c run]))}, queue-render {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([c]))}, :name reagent.impl.batching/queue-render, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, next-tick {:name reagent.impl.batching/next-tick, :file "resources/templates/js/out/reagent/impl/batching.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 14, :column 6, :end-line 14, :end-column 15}}, flush {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 54, :column 7, :end-line 54, :end-column 12, :arglists (quote ([]))}, :name reagent.impl.batching/flush, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mark-rendered {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 61, :column 7, :end-line 61, :end-column 20, :arglists (quote ([c]))}, :name reagent.impl.batching/mark-rendered, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, render-queue {:name reagent.impl.batching/render-queue, :file "resources/templates/js/out/reagent/impl/batching.cljs", :line 52, :column 1, :end-line 52, :end-column 18, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 52, :column 6, :end-line 52, :end-column 18}}, RenderQueue {:num-fields 2, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/RenderQueue, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 21, :type true, :column 10, :line 37, :record false, :end-line 37, :skip-protocol-flag nil}, ->RenderQueue {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 37, :column 10, :end-line 37, :end-column 21, :protocols #{reagent.impl.batching/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([queue scheduled?]))}, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/->RenderQueue, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 21, :method-params ([queue scheduled?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([queue scheduled?])), :skip-protocol-flag nil}, is-reagent-component {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 66, :column 7, :end-line 66, :end-column 27, :arglists (quote ([c]))}, :name reagent.impl.batching/is-reagent-component, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 27, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, run-queue {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([a]))}, :name reagent.impl.batching/run-queue, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 16, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, compare-levels {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([c1 c2]))}, :name reagent.impl.batching/compare-levels, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 21, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, dispose {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/batching.cljs", :line 84, :column 7, :end-line 84, :end-column 14, :arglists (quote ([c]))}, :name reagent.impl.batching/dispose, :variadic false, :file "resources/templates/js/out/reagent/impl/batching.cljs", :end-column 14, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:derefed :auto-run}, :order [:auto-run :derefed]}, :doc nil}