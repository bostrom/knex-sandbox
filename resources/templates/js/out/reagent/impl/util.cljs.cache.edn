;; Analyzed by ClojureScript 0.0-3308
{:use-macros {log reagent.debug, dbg reagent.debug, .' reagent.interop, .! reagent.interop}, :excludes #{}, :name reagent.impl.util, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, string clojure.string, clojure.string clojure.string}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.util/get-props, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, get-argv {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([c]))}, :name reagent.impl.util/get-argv, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, merge-props {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 102, :column 7, :end-line 102, :end-column 18, :arglists (quote ([p1 p2]))}, :name reagent.impl.util/merge-props, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 18, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, re-render-component {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 127, :column 7, :end-line 127, :end-column 26, :arglists (quote ([comp container]))}, :name reagent.impl.util/re-render-component, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 26, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container]))}, force-update-all {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 157, :column 7, :end-line 157, :end-column 23, :arglists (quote ([]))}, :name reagent.impl.util/force-update-all, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-root-id {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 121, :column 7, :end-line 121, :end-column 18, :arglists (quote ([cont]))}, :name reagent.impl.util/get-root-id, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 18, :method-params ([cont]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cont]))}, capitalize {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([s]))}, :name reagent.impl.util/capitalize, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, cached-react-class {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([c]))}, :name reagent.impl.util/cached-react-class, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, dash-to-camel {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([dashed]))}, :name reagent.impl.util/dash-to-camel, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 20, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed]))}, reagent-component? {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 30, :column 7, :end-line 30, :end-column 25, :arglists (quote ([c]))}, :name reagent.impl.util/reagent-component?, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, dont-camel-case {:name reagent.impl.util/dont-camel-case, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 51, :column 1, :end-line 51, :end-column 21, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 51, :column 6, :end-line 51, :end-column 21}}, merge-style {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 94, :column 8, :end-line 94, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-style, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, memoize-1 {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.util/memoize-1, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, unmount-component-at-node {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 151, :column 7, :end-line 151, :end-column 32, :arglists (quote ([container]))}, :name reagent.impl.util/unmount-component-at-node, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, ->partial-ifn {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 68, :column 10, :end-line 68, :end-column 21, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :factory :positional, :arglists (quote ([f args p]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/->partial-ifn, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 21, :method-params ([f args p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f args p])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, render-component {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 141, :column 7, :end-line 141, :end-column 23, :arglists (quote ([comp container callback]))}, :name reagent.impl.util/render-component, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback]))}, extract-children {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 15, :column 7, :end-line 15, :end-column 23, :arglists (quote ([v]))}, :name reagent.impl.util/extract-children, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, react-id-name {:name reagent.impl.util/react-id-name, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 113, :column 1, :end-line 113, :end-column 19, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 113, :column 6, :end-line 113, :end-column 19}}, extract-props {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([v]))}, :name reagent.impl.util/extract-props, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, equal-args {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 190, :column 7, :end-line 190, :end-column 17, :arglists (quote ([v1 v2]))}, :name reagent.impl.util/equal-args, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 17, :method-params ([v1 v2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v1 v2]))}, partial-ifn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/partial-ifn, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 21, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, get-children {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([c]))}, :name reagent.impl.util/get-children, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, roots {:name reagent.impl.util/roots, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 125, :column 1, :end-line 125, :end-column 11, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 125, :column 6, :end-line 125, :end-column 11}}, merge-class {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 86, :column 8, :end-line 86, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-class, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, doc-node-type {:name reagent.impl.util/doc-node-type, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 112, :column 1, :end-line 112, :end-column 19, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 112, :column 6, :end-line 112, :end-column 19}}, is-client {:name reagent.impl.util/is-client, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 6, :column 6, :end-line 6, :end-column 15}}, get-react-node {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 115, :column 7, :end-line 115, :end-column 21, :arglists (quote ([cont]))}, :name reagent.impl.util/get-react-node, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 21, :method-params ([cont]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cont]))}, clj-ifn? {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 82, :column 7, :end-line 82, :end-column 15, :arglists (quote ([x]))}, :name reagent.impl.util/clj-ifn?, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, cache-react-class {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 36, :column 7, :end-line 36, :end-column 24, :arglists (quote ([c constructor]))}, :name reagent.impl.util/cache-react-class, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 24, :method-params ([c constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c constructor]))}, shallow-equal-maps {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 173, :column 7, :end-line 173, :end-column 25, :arglists (quote ([x y]))}, :name reagent.impl.util/shallow-equal-maps, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 25, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, identical-ish? {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 167, :column 7, :end-line 167, :end-column 21, :arglists (quote ([x y]))}, :name reagent.impl.util/identical-ish?, :variadic false, :file "resources/templates/js/out/reagent/impl/util.cljs", :end-column 21, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, -not-found {:name reagent.impl.util/-not-found, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 165, :column 1, :end-line 165, :end-column 16, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 165, :column 6, :end-line 165, :end-column 16}}, *always-update* {:name reagent.impl.util/*always-update*, :file "resources/templates/js/out/reagent/impl/util.cljs", :line 110, :column 1, :end-line 110, :end-column 35, :dynamic true, :declared true, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/reagent/impl/util.cljs", :line 110, :column 20, :end-line 110, :end-column 35, :dynamic true, :declared true}}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:else :style :class}, :order [:class :style :else]}, :doc nil}