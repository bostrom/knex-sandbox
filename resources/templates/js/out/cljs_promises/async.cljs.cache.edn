;; Analyzed by ClojureScript 0.0-3308
{:name cljs-promises.async, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, impl cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, cljs-promises.core cljs-promises.core}, :imports nil, :defs {take-as-promise! {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 102, :column 7, :end-line 102, :end-column 23, :arglists (quote ([ch])), :doc "Waits for the next value from `ch` and returns a promise of that value."}, :name cljs-promises.async/take-as-promise!, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Waits for the next value from `ch` and returns a promise of that value."}, ->t12209 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([value-port promise meta12210])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12209, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([value-port promise meta12210]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value-port promise meta12210])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t12215 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12215, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 77, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t12212 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12212, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 63, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, error-port {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 73, :column 7, :end-line 73, :end-column 17, :arglists (quote ([promise])), :doc "The reverse of `value-port`, passing along errors when `promise` rejects and sending\n  nils when `promise` fulfills with a value."}, :name cljs-promises.async/error-port, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 17, :method-params ([promise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promise])), :doc "The reverse of `value-port`, passing along errors when `promise` rejects and sending\n  nils when `promise` fulfills with a value."}, extend-promises-as-pair-channels! {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 37, :column 7, :end-line 37, :end-column 40, :arglists (quote ([] [promise-constructor])), :doc "Globally extends Promises with `extend-promises-as-channels!` such that the\n  values taken from them are vector pairs of [value nil] in the case of fulfillment,\n  or [nil error] in the case of rejection. Takes an optional `promise-constructor`\n  to extend, defaulting to `js/Promise`.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [promise-constructor]), :arglists ([] [promise-constructor]), :arglists-meta (nil nil)}}, :name cljs-promises.async/extend-promises-as-pair-channels!, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 40, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [promise-constructor]), :arglists ([] [promise-constructor]), :arglists-meta (nil nil)}, :method-params ([] [promise-constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists ([] [promise-constructor]), :doc "Globally extends Promises with `extend-promises-as-channels!` such that the\n  values taken from them are vector pairs of [value nil] in the case of fulfillment,\n  or [nil error] in the case of rejection. Takes an optional `promise-constructor`\n  to extend, defaulting to `js/Promise`."}, ->t12212 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([value-port promise meta12213])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12212, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([value-port promise meta12213]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value-port promise meta12213])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pair-port {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([promise])), :doc "Returns a ReadPort which sends [value nil] when `promise` fulfills, and [nil error]\n  when `promise` rejects."}, :name cljs-promises.async/pair-port, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 16, :method-params ([promise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promise])), :doc "Returns a ReadPort which sends [value nil] when `promise` fulfills, and [nil error]\n  when `promise` rejects."}, t12209 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12209, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 63, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, extend-promises-as-channels! {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 7, :column 7, :end-line 7, :end-column 35, :arglists (quote ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor])), :doc "If you want, you can globally extend Promise to act as a one-way channel which\n  can only be taken from, and which starts producing a never-ending stream of constants\n  once the promise resolves. `value-transform` and `error-transform` are functions\n  which are applied to the value or error when the Promise resolves or rejects.\n  Both `value-transform` and `error-transform` default to identity. Takes an optional\n  `promise-constructor` to extend, defaulting to `js/Promise`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :arglists ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :arglists-meta (nil nil nil nil)}}, :name cljs-promises.async/extend-promises-as-channels!, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 35, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :arglists ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :arglists-meta (nil nil nil nil)}, :method-params ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists ([] [value-transform] [value-transform error-transform] [value-transform error-transform promise-constructor]), :doc "If you want, you can globally extend Promise to act as a one-way channel which\n  can only be taken from, and which starts producing a never-ending stream of constants\n  once the promise resolves. `value-transform` and `error-transform` are functions\n  which are applied to the value or error when the Promise resolves or rejects.\n  Both `value-transform` and `error-transform` default to identity. Takes an optional\n  `promise-constructor` to extend, defaulting to `js/Promise`."}, consume-pair {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 49, :column 7, :end-line 49, :end-column 19, :arglists (quote ([[val err]])), :doc "When passed a [value nil] pair, returns value. When passed a [nil error] pair,\n  throws error. See also `cljs-promises.async/<?`."}, :name cljs-promises.async/consume-pair, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 19, :method-params ([p__12206]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[val err]])), :doc "When passed a [value nil] pair, returns value. When passed a [nil error] pair,\n  throws error. See also `cljs-promises.async/<?`."}, ->t12224 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pair-port promise meta12225])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12224, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([pair-port promise meta12225]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pair-port promise meta12225])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t12218 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12218, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 77, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, value-port {:protocol-inline nil, :meta {:file "/Users/matt/dev/knexPlayground/resources/templates/js/out/cljs_promises/async.cljs", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([promise])), :doc "Wraps a promise and returns a ReadPort (a read-only channel-like). When the\n  promise fulfills with a value, that value is sent constantly on the channel\n  (the value might be nil). When the promise rejects with an error, nil is sent\n  constantly."}, :name cljs-promises.async/value-port, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :end-column 17, :method-params ([promise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promise])), :doc "Wraps a promise and returns a ReadPort (a read-only channel-like). When the\n  promise fulfills with a value, that value is sent constantly on the channel\n  (the value might be nil). When the promise rejects with an error, nil is sent\n  constantly."}, t12224 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12224, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 91, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t12221 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pair-port promise meta12222])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12221, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([pair-port promise meta12222]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pair-port promise meta12222])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t12215 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([error-port promise meta12216])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12215, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([error-port promise meta12216]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([error-port promise meta12216])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t12221 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/t12221, :file "resources/templates/js/out/cljs_promises/async.cljs", :type true, :anonymous true, :column 3, :line 91, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t12218 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([error-port promise meta12219])), :file nil}, :protocols #{cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs-promises.async/->t12218, :variadic false, :file "resources/templates/js/out/cljs_promises/async.cljs", :method-params ([error-port promise meta12219]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([error-port promise meta12219])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}}